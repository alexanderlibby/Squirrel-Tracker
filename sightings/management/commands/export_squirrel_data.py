import csv

from django.core.management.base import BaseCommand

#from tools import DynamicCommand # see https://gist.github.com/2724472


class Command(BaseCommand):
    """
    Easily export a model's objects in csv format.  In this example the csv can be generated by executing:
    ./manage.py export your_model
    """
    
    def handle(self, *args, **kwargs):
        
        csv_path = kwargs['csv_path']
        with open(csv_path, 'w+') as csv_file:
            writer = csv.writer(csv_file)
            for obj in Sightings.objects.values_list():
                row = list(obj)
                writer.writerow(row


    def your_model(self, path):
        from sightings.models import Sighting
        meta = {
            'file': path,
            'class': Sighting,
            'fields': '__all__' # models fields you want to include 
        }
        self._write_csv(meta)

    def _write_csv(self):
        """
        :param meta: (dict) keys should be 'file' (string: absolute path), 'class' the Python class
        object, 'fields' a list or tuple of field model field names (strings)
        """
        csv_path = kwargs['csv_path']
        with open(csv_path, 'w+') as csv_file:
            writer = csv.writer(csv_file)
            for obj in Sightings.objects.values_list():
                row = list(obj)
                writer.writerow(row

